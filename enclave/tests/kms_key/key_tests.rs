use enclave_kmstool::{KmstoolGetKeyPolicyResult, KmstoolListKeyPoliciesResult};
use std::convert::TryFrom;
use vaultron_enclave::kms_key::{KmsKeyPolicies, KmsKeyPolicy};

#[tokio::test]
pub async fn test_key_policies() {
    let json_data = include_str!("../test_files/kms_key/key_policies.json");
    let key_policies = KmstoolListKeyPoliciesResult::builder()
        .policies(json_data.as_bytes().to_vec())
        .build();
    let key_policies = KmsKeyPolicies::try_from(key_policies).unwrap();
    assert_eq!(key_policies.policy_names.len(), 1);
    assert_eq!(key_policies.policy_names[0], "default");
    assert!(!key_policies.truncated);
    assert!(key_policies.verify());

    let mut key_policies1 = key_policies.clone();
    key_policies1.policy_names.insert(0, "custom".to_string());
    assert!(!key_policies1.verify());

    let mut key_policies2 = key_policies.clone();
    key_policies2.policy_names.pop();
    assert!(!key_policies2.verify());

    let mut key_policies3 = key_policies.clone();
    key_policies3.truncated = true;
    assert!(!key_policies3.verify());
}

#[tokio::test]
pub async fn test_key_policies_from_raw_bytes() {
    // Test with the specific policy format from the log
    let raw_bytes = vec![
        123, 34, 80, 111, 108, 105, 99, 121, 78, 97, 109, 101, 115, 34, 58, 91, 34, 100, 101, 102, 97, 117, 108, 116,
        34, 93, 44, 34, 84, 114, 117, 110, 99, 97, 116, 101, 100, 34, 58, 102, 97, 108, 115, 101, 125,
    ];
    let key_policies = KmstoolListKeyPoliciesResult::builder().policies(raw_bytes).build();
    let key_policies = KmsKeyPolicies::try_from(key_policies).unwrap();
    assert_eq!(key_policies.policy_names.len(), 1);
    assert_eq!(key_policies.policy_names[0], "default");
    assert!(!key_policies.truncated);
    assert!(key_policies.verify());
}

#[tokio::test]
pub async fn test_key_policy() {
    let json_data = include_str!("../test_files/kms_key/key_policy.json");
    let key_policy = KmstoolGetKeyPolicyResult::builder()
        .policy(json_data.as_bytes().to_vec())
        .build();
    let key_policy = KmsKeyPolicy::try_from(key_policy).unwrap();
    assert!(key_policy.verify("".to_string()));
}

#[tokio::test]
pub async fn test_key_policy_from_raw_bytes() {
    let raw_bytes = vec![
        123, 34, 80, 111, 108, 105, 99, 121, 34, 58, 34, 123, 92, 110, 32, 32, 92, 34, 86, 101, 114, 115, 105, 111,
        110, 92, 34, 32, 58, 32, 92, 34, 50, 48, 49, 50, 45, 49, 48, 45, 49, 55, 92, 34, 44, 92, 110, 32, 32, 92, 34,
        73, 100, 92, 34, 32, 58, 32, 92, 34, 107, 101, 121, 45, 99, 111, 110, 115, 111, 108, 101, 112, 111, 108, 105,
        99, 121, 45, 51, 92, 34, 44, 92, 110, 32, 32, 92, 34, 83, 116, 97, 116, 101, 109, 101, 110, 116, 92, 34, 32,
        58, 32, 91, 32, 123, 92, 110, 32, 32, 32, 32, 92, 34, 83, 105, 100, 92, 34, 32, 58, 32, 92, 34, 69, 110, 97,
        98, 108, 101, 32, 100, 101, 99, 114, 121, 112, 116, 32, 102, 114, 111, 109, 32, 101, 110, 99, 108, 97, 118,
        101, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 69, 102, 102, 101, 99, 116, 92, 34, 32, 58, 32, 92, 34, 65,
        108, 108, 111, 119, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 80, 114, 105, 110, 99, 105, 112, 97, 108, 92,
        34, 32, 58, 32, 123, 92, 110, 32, 32, 32, 32, 32, 32, 92, 34, 65, 87, 83, 92, 34, 32, 58, 32, 91, 32, 92, 34,
        97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57, 52, 49, 51, 55, 55, 49, 52, 56, 57, 57, 55, 58,
        114, 111, 108, 101, 47, 102, 97, 105, 114, 120, 95, 101, 110, 99, 108, 97, 118, 101, 95, 114, 111, 108, 101,
        92, 34, 44, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57, 52, 49, 51, 55, 55, 49,
        52, 56, 57, 57, 55, 58, 117, 115, 101, 114, 47, 109, 105, 107, 101, 92, 34, 32, 93, 92, 110, 32, 32, 32, 32,
        125, 44, 92, 110, 32, 32, 32, 32, 92, 34, 65, 99, 116, 105, 111, 110, 92, 34, 32, 58, 32, 92, 34, 107, 109,
        115, 58, 68, 101, 99, 114, 121, 112, 116, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 82, 101, 115, 111, 117,
        114, 99, 101, 92, 34, 32, 58, 32, 92, 34, 42, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 67, 111, 110, 100,
        105, 116, 105, 111, 110, 92, 34, 32, 58, 32, 123, 92, 110, 32, 32, 32, 32, 32, 32, 92, 34, 83, 116, 114, 105,
        110, 103, 69, 113, 117, 97, 108, 115, 73, 103, 110, 111, 114, 101, 67, 97, 115, 101, 92, 34, 32, 58, 32, 123,
        92, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 34, 107, 109, 115, 58, 82, 101, 99, 105, 112, 105, 101, 110, 116,
        65, 116, 116, 101, 115, 116, 97, 116, 105, 111, 110, 58, 73, 109, 97, 103, 101, 83, 104, 97, 51, 56, 52, 92,
        34, 32, 58, 32, 92, 34, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
        48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
        48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
        48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 92, 34, 92, 110, 32, 32, 32, 32, 32,
        32, 125, 92, 110, 32, 32, 32, 32, 125, 92, 110, 32, 32, 125, 44, 32, 123, 92, 110, 32, 32, 32, 32, 92, 34, 83,
        105, 100, 92, 34, 32, 58, 32, 92, 34, 69, 110, 97, 98, 108, 101, 32, 101, 110, 99, 114, 121, 112, 116, 32, 102,
        114, 111, 109, 32, 105, 110, 115, 116, 97, 110, 99, 101, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 69, 102,
        102, 101, 99, 116, 92, 34, 32, 58, 32, 92, 34, 65, 108, 108, 111, 119, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92,
        34, 80, 114, 105, 110, 99, 105, 112, 97, 108, 92, 34, 32, 58, 32, 123, 92, 110, 32, 32, 32, 32, 32, 32, 92, 34,
        65, 87, 83, 92, 34, 32, 58, 32, 91, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57,
        52, 49, 51, 55, 55, 49, 52, 56, 57, 57, 55, 58, 114, 111, 108, 101, 47, 102, 97, 105, 114, 120, 95, 101, 110,
        99, 108, 97, 118, 101, 95, 114, 111, 108, 101, 92, 34, 44, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105,
        97, 109, 58, 58, 57, 52, 49, 51, 55, 55, 49, 52, 56, 57, 57, 55, 58, 117, 115, 101, 114, 47, 109, 105, 107,
        101, 92, 34, 32, 93, 92, 110, 32, 32, 32, 32, 125, 44, 92, 110, 32, 32, 32, 32, 92, 34, 65, 99, 116, 105, 111,
        110, 92, 34, 32, 58, 32, 92, 34, 107, 109, 115, 58, 69, 110, 99, 114, 121, 112, 116, 92, 34, 44, 92, 110, 32,
        32, 32, 32, 92, 34, 82, 101, 115, 111, 117, 114, 99, 101, 92, 34, 32, 58, 32, 92, 34, 42, 92, 34, 92, 110, 32,
        32, 125, 44, 32, 123, 92, 110, 32, 32, 32, 32, 92, 34, 83, 105, 100, 92, 34, 32, 58, 32, 92, 34, 65, 108, 108,
        111, 119, 32, 103, 101, 116, 32, 107, 101, 121, 32, 112, 111, 108, 105, 99, 121, 32, 102, 111, 114, 32, 101,
        110, 99, 108, 97, 118, 101, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 69, 102, 102, 101, 99, 116, 92, 34,
        32, 58, 32, 92, 34, 65, 108, 108, 111, 119, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 80, 114, 105, 110, 99,
        105, 112, 97, 108, 92, 34, 32, 58, 32, 123, 92, 110, 32, 32, 32, 32, 32, 32, 92, 34, 65, 87, 83, 92, 34, 32,
        58, 32, 91, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57, 52, 49, 51, 55, 55, 49,
        52, 56, 57, 57, 55, 58, 114, 111, 108, 101, 47, 102, 97, 105, 114, 120, 95, 101, 110, 99, 108, 97, 118, 101,
        95, 114, 111, 108, 101, 92, 34, 44, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57,
        52, 49, 51, 55, 55, 49, 52, 56, 57, 57, 55, 58, 117, 115, 101, 114, 47, 109, 105, 107, 101, 92, 34, 32, 93, 92,
        110, 32, 32, 32, 32, 125, 44, 92, 110, 32, 32, 32, 32, 92, 34, 65, 99, 116, 105, 111, 110, 92, 34, 32, 58, 32,
        92, 34, 107, 109, 115, 58, 71, 101, 116, 75, 101, 121, 80, 111, 108, 105, 99, 121, 92, 34, 44, 92, 110, 32, 32,
        32, 32, 92, 34, 82, 101, 115, 111, 117, 114, 99, 101, 92, 34, 32, 58, 32, 92, 34, 42, 92, 34, 92, 110, 32, 32,
        125, 44, 32, 123, 92, 110, 32, 32, 32, 32, 92, 34, 83, 105, 100, 92, 34, 32, 58, 32, 92, 34, 65, 108, 108, 111,
        119, 32, 108, 105, 115, 116, 32, 107, 101, 121, 32, 112, 111, 108, 105, 99, 105, 101, 115, 32, 102, 111, 114,
        32, 101, 110, 99, 108, 97, 118, 101, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 69, 102, 102, 101, 99, 116,
        92, 34, 32, 58, 32, 92, 34, 65, 108, 108, 111, 119, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 80, 114, 105,
        110, 99, 105, 112, 97, 108, 92, 34, 32, 58, 32, 123, 92, 110, 32, 32, 32, 32, 32, 32, 92, 34, 65, 87, 83, 92,
        34, 32, 58, 32, 91, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57, 52, 49, 51, 55,
        55, 49, 52, 56, 57, 57, 55, 58, 114, 111, 108, 101, 47, 102, 97, 105, 114, 120, 95, 101, 110, 99, 108, 97, 118,
        101, 95, 114, 111, 108, 101, 92, 34, 44, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58,
        57, 52, 49, 51, 55, 55, 49, 52, 56, 57, 57, 55, 58, 117, 115, 101, 114, 47, 109, 105, 107, 101, 92, 34, 32, 93,
        92, 110, 32, 32, 32, 32, 125, 44, 92, 110, 32, 32, 32, 32, 92, 34, 65, 99, 116, 105, 111, 110, 92, 34, 32, 58,
        32, 92, 34, 107, 109, 115, 58, 76, 105, 115, 116, 75, 101, 121, 80, 111, 108, 105, 99, 105, 101, 115, 92, 34,
        44, 92, 110, 32, 32, 32, 32, 92, 34, 82, 101, 115, 111, 117, 114, 99, 101, 92, 34, 32, 58, 32, 92, 34, 42, 92,
        34, 92, 110, 32, 32, 125, 44, 32, 123, 92, 110, 32, 32, 32, 32, 92, 34, 83, 105, 100, 92, 34, 32, 58, 32, 92,
        34, 65, 108, 108, 111, 119, 32, 97, 99, 99, 101, 115, 115, 32, 102, 111, 114, 32, 75, 101, 121, 32, 65, 100,
        109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115, 92, 34, 44, 92, 110, 32, 32, 32, 32, 92, 34, 69,
        102, 102, 101, 99, 116, 92, 34, 32, 58, 32, 92, 34, 65, 108, 108, 111, 119, 92, 34, 44, 92, 110, 32, 32, 32,
        32, 92, 34, 80, 114, 105, 110, 99, 105, 112, 97, 108, 92, 34, 32, 58, 32, 123, 92, 110, 32, 32, 32, 32, 32, 32,
        92, 34, 65, 87, 83, 92, 34, 32, 58, 32, 92, 34, 97, 114, 110, 58, 97, 119, 115, 58, 105, 97, 109, 58, 58, 57,
        52, 49, 51, 55, 55, 49, 52, 56, 57, 57, 55, 58, 114, 111, 111, 116, 92, 34, 92, 110, 32, 32, 32, 32, 125, 44,
        92, 110, 32, 32, 32, 32, 92, 34, 65, 99, 116, 105, 111, 110, 92, 34, 32, 58, 32, 91, 32, 92, 34, 107, 109, 115,
        58, 67, 114, 101, 97, 116, 101, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 68, 101, 115, 99, 114, 105, 98,
        101, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 69, 110, 97, 98, 108, 101, 42, 92, 34, 44, 32, 92, 34, 107,
        109, 115, 58, 76, 105, 115, 116, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 80, 117, 116, 42, 92, 34, 44,
        32, 92, 34, 107, 109, 115, 58, 85, 112, 100, 97, 116, 101, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 82,
        101, 118, 111, 107, 101, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 68, 105, 115, 97, 98, 108, 101, 42, 92,
        34, 44, 32, 92, 34, 107, 109, 115, 58, 71, 101, 116, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 68, 101,
        108, 101, 116, 101, 42, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 84, 97, 103, 82, 101, 115, 111, 117, 114,
        99, 101, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 85, 110, 116, 97, 103, 82, 101, 115, 111, 117, 114, 99,
        101, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 83, 99, 104, 101, 100, 117, 108, 101, 75, 101, 121, 68, 101,
        108, 101, 116, 105, 111, 110, 92, 34, 44, 32, 92, 34, 107, 109, 115, 58, 67, 97, 110, 99, 101, 108, 75, 101,
        121, 68, 101, 108, 101, 116, 105, 111, 110, 92, 34, 32, 93, 44, 92, 110, 32, 32, 32, 32, 92, 34, 82, 101, 115,
        111, 117, 114, 99, 101, 92, 34, 32, 58, 32, 92, 34, 42, 92, 34, 92, 110, 32, 32, 125, 32, 93, 92, 110, 125, 34,
        44, 34, 80, 111, 108, 105, 99, 121, 78, 97, 109, 101, 34, 58, 34, 100, 101, 102, 97, 117, 108, 116, 34, 125,
    ];
    let key_policy: KmstoolGetKeyPolicyResult = KmstoolGetKeyPolicyResult::builder().policy(raw_bytes).build();
    let key_policy = KmsKeyPolicy::try_from(key_policy).unwrap();
    assert!(key_policy.verify("".to_string()));
}
