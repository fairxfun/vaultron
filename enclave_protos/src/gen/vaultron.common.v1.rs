// @generated
#[derive(typed_builder::TypedBuilder)]
#[builder(field_defaults(default, setter(into)))]
#[derive(enclave_protos_macros::ProtoBuilder)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusCode {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, optional, tag="2")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(oneof="status_code::Error", tags="3, 4")]
    pub error: ::core::option::Option<status_code::Error>,
}
/// Nested message and enum types in `StatusCode`.
pub mod status_code {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Error {
        #[prost(enumeration="super::EnclaveError", tag="3")]
        EnclaveError(i32),
        #[prost(enumeration="super::EnclaveAgentError", tag="4")]
        EnclaveAgentError(i32),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnclaveError {
    Unspecified = 0,
    UnknownError = 1,
    ClusterNotInitializedError = 2,
    ClusterAlreadyInitializedError = 3,
    SeedCannotProcessRequestError = 4,
    InvalidRequestError = 5,
    InvalidSignatureError = 6,
    InvalidAccountError = 7,
    WalletGenerationError = 8,
    InvalidParameterError = 9,
    InvalidAttestationDocumentError = 10,
    EnclaveCryptoError = 11,
    InvalidClusterPublicKeyError = 12,
    ProtobufEncodeError = 13,
    ProtobufDecodeError = 14,
    ResponseProtobufDecodeError = 15,
    PostcardError = 16,
    LogError = 17,
    IoError = 18,
    AnyhowError = 19,
    SerdeJsonError = 20,
    NsmApiError = 21,
    AttestationError = 22,
    VsockClientError = 23,
}
impl EnclaveError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EnclaveError::Unspecified => "ENCLAVE_ERROR_UNSPECIFIED",
            EnclaveError::UnknownError => "ENCLAVE_ERROR_UNKNOWN_ERROR",
            EnclaveError::ClusterNotInitializedError => "ENCLAVE_ERROR_CLUSTER_NOT_INITIALIZED_ERROR",
            EnclaveError::ClusterAlreadyInitializedError => "ENCLAVE_ERROR_CLUSTER_ALREADY_INITIALIZED_ERROR",
            EnclaveError::SeedCannotProcessRequestError => "ENCLAVE_ERROR_SEED_CANNOT_PROCESS_REQUEST_ERROR",
            EnclaveError::InvalidRequestError => "ENCLAVE_ERROR_INVALID_REQUEST_ERROR",
            EnclaveError::InvalidSignatureError => "ENCLAVE_ERROR_INVALID_SIGNATURE_ERROR",
            EnclaveError::InvalidAccountError => "ENCLAVE_ERROR_INVALID_ACCOUNT_ERROR",
            EnclaveError::WalletGenerationError => "ENCLAVE_ERROR_WALLET_GENERATION_ERROR",
            EnclaveError::InvalidParameterError => "ENCLAVE_ERROR_INVALID_PARAMETER_ERROR",
            EnclaveError::InvalidAttestationDocumentError => "ENCLAVE_ERROR_INVALID_ATTESTATION_DOCUMENT_ERROR",
            EnclaveError::EnclaveCryptoError => "ENCLAVE_ERROR_ENCLAVE_CRYPTO_ERROR",
            EnclaveError::InvalidClusterPublicKeyError => "ENCLAVE_ERROR_INVALID_CLUSTER_PUBLIC_KEY_ERROR",
            EnclaveError::ProtobufEncodeError => "ENCLAVE_ERROR_PROTOBUF_ENCODE_ERROR",
            EnclaveError::ProtobufDecodeError => "ENCLAVE_ERROR_PROTOBUF_DECODE_ERROR",
            EnclaveError::ResponseProtobufDecodeError => "ENCLAVE_ERROR_RESPONSE_PROTOBUF_DECODE_ERROR",
            EnclaveError::PostcardError => "ENCLAVE_ERROR_POSTCARD_ERROR",
            EnclaveError::LogError => "ENCLAVE_ERROR_LOG_ERROR",
            EnclaveError::IoError => "ENCLAVE_ERROR_IO_ERROR",
            EnclaveError::AnyhowError => "ENCLAVE_ERROR_ANYHOW_ERROR",
            EnclaveError::SerdeJsonError => "ENCLAVE_ERROR_SERDE_JSON_ERROR",
            EnclaveError::NsmApiError => "ENCLAVE_ERROR_NSM_API_ERROR",
            EnclaveError::AttestationError => "ENCLAVE_ERROR_ATTESTATION_ERROR",
            EnclaveError::VsockClientError => "ENCLAVE_ERROR_VSOCK_CLIENT_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENCLAVE_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "ENCLAVE_ERROR_UNKNOWN_ERROR" => Some(Self::UnknownError),
            "ENCLAVE_ERROR_CLUSTER_NOT_INITIALIZED_ERROR" => Some(Self::ClusterNotInitializedError),
            "ENCLAVE_ERROR_CLUSTER_ALREADY_INITIALIZED_ERROR" => Some(Self::ClusterAlreadyInitializedError),
            "ENCLAVE_ERROR_SEED_CANNOT_PROCESS_REQUEST_ERROR" => Some(Self::SeedCannotProcessRequestError),
            "ENCLAVE_ERROR_INVALID_REQUEST_ERROR" => Some(Self::InvalidRequestError),
            "ENCLAVE_ERROR_INVALID_SIGNATURE_ERROR" => Some(Self::InvalidSignatureError),
            "ENCLAVE_ERROR_INVALID_ACCOUNT_ERROR" => Some(Self::InvalidAccountError),
            "ENCLAVE_ERROR_WALLET_GENERATION_ERROR" => Some(Self::WalletGenerationError),
            "ENCLAVE_ERROR_INVALID_PARAMETER_ERROR" => Some(Self::InvalidParameterError),
            "ENCLAVE_ERROR_INVALID_ATTESTATION_DOCUMENT_ERROR" => Some(Self::InvalidAttestationDocumentError),
            "ENCLAVE_ERROR_ENCLAVE_CRYPTO_ERROR" => Some(Self::EnclaveCryptoError),
            "ENCLAVE_ERROR_INVALID_CLUSTER_PUBLIC_KEY_ERROR" => Some(Self::InvalidClusterPublicKeyError),
            "ENCLAVE_ERROR_PROTOBUF_ENCODE_ERROR" => Some(Self::ProtobufEncodeError),
            "ENCLAVE_ERROR_PROTOBUF_DECODE_ERROR" => Some(Self::ProtobufDecodeError),
            "ENCLAVE_ERROR_RESPONSE_PROTOBUF_DECODE_ERROR" => Some(Self::ResponseProtobufDecodeError),
            "ENCLAVE_ERROR_POSTCARD_ERROR" => Some(Self::PostcardError),
            "ENCLAVE_ERROR_LOG_ERROR" => Some(Self::LogError),
            "ENCLAVE_ERROR_IO_ERROR" => Some(Self::IoError),
            "ENCLAVE_ERROR_ANYHOW_ERROR" => Some(Self::AnyhowError),
            "ENCLAVE_ERROR_SERDE_JSON_ERROR" => Some(Self::SerdeJsonError),
            "ENCLAVE_ERROR_NSM_API_ERROR" => Some(Self::NsmApiError),
            "ENCLAVE_ERROR_ATTESTATION_ERROR" => Some(Self::AttestationError),
            "ENCLAVE_ERROR_VSOCK_CLIENT_ERROR" => Some(Self::VsockClientError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnclaveAgentError {
    Unspecified = 0,
    UnknownError = 1,
    InvalidRequestError = 2,
    StartEnclaveError = 3,
    StopEnclaveError = 4,
    DescribeEnclaveError = 5,
    IoError = 6,
    SerdeJsonError = 7,
}
impl EnclaveAgentError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EnclaveAgentError::Unspecified => "ENCLAVE_AGENT_ERROR_UNSPECIFIED",
            EnclaveAgentError::UnknownError => "ENCLAVE_AGENT_ERROR_UNKNOWN_ERROR",
            EnclaveAgentError::InvalidRequestError => "ENCLAVE_AGENT_ERROR_INVALID_REQUEST_ERROR",
            EnclaveAgentError::StartEnclaveError => "ENCLAVE_AGENT_ERROR_START_ENCLAVE_ERROR",
            EnclaveAgentError::StopEnclaveError => "ENCLAVE_AGENT_ERROR_STOP_ENCLAVE_ERROR",
            EnclaveAgentError::DescribeEnclaveError => "ENCLAVE_AGENT_ERROR_DESCRIBE_ENCLAVE_ERROR",
            EnclaveAgentError::IoError => "ENCLAVE_AGENT_ERROR_IO_ERROR",
            EnclaveAgentError::SerdeJsonError => "ENCLAVE_AGENT_ERROR_SERDE_JSON_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENCLAVE_AGENT_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "ENCLAVE_AGENT_ERROR_UNKNOWN_ERROR" => Some(Self::UnknownError),
            "ENCLAVE_AGENT_ERROR_INVALID_REQUEST_ERROR" => Some(Self::InvalidRequestError),
            "ENCLAVE_AGENT_ERROR_START_ENCLAVE_ERROR" => Some(Self::StartEnclaveError),
            "ENCLAVE_AGENT_ERROR_STOP_ENCLAVE_ERROR" => Some(Self::StopEnclaveError),
            "ENCLAVE_AGENT_ERROR_DESCRIBE_ENCLAVE_ERROR" => Some(Self::DescribeEnclaveError),
            "ENCLAVE_AGENT_ERROR_IO_ERROR" => Some(Self::IoError),
            "ENCLAVE_AGENT_ERROR_SERDE_JSON_ERROR" => Some(Self::SerdeJsonError),
            _ => None,
        }
    }
}
/// Encoded file descriptor set for the `vaultron.common.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0xb2, 0x1b, 0x0a, 0x1f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
    0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x63,
    0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0x8d, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61,
    0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
    0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
    0x73, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
    0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0d, 0x65,
    0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
    0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x45,
    0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x45,
    0x72, 0x72, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f,
    0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x25, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x67,
    0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6c,
    0x61, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a,
    0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
    0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xdd, 0x07, 0x0a, 0x0c, 0x45, 0x6e, 0x63,
    0x6c, 0x61, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x43,
    0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
    0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x43, 0x4c,
    0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
    0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4e, 0x43,
    0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
    0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
    0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x4e,
    0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x55, 0x53,
    0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54,
    0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
    0x33, 0x0a, 0x2f, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f,
    0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
    0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x29, 0x0a,
    0x25, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
    0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x43, 0x4c,
    0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
    0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
    0x07, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
    0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25,
    0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
    0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x4e, 0x43, 0x4c, 0x41,
    0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
    0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x43,
    0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x26, 0x0a,
    0x22, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45,
    0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
    0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45,
    0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x43,
    0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
    0x42, 0x55, 0x46, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x5f, 0x44, 0x45, 0x43,
    0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x30, 0x0a, 0x2c, 0x45,
    0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53,
    0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x5f, 0x44,
    0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x20, 0x0a,
    0x1c, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50,
    0x4f, 0x53, 0x54, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x12,
    0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16,
    0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4f,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x43, 0x4c,
    0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x59, 0x48, 0x4f, 0x57,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x43, 0x4c,
    0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x5f,
    0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b,
    0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x53,
    0x4d, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x23, 0x0a,
    0x1f, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41,
    0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x56, 0x53, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x17, 0x2a, 0xe3, 0x02, 0x0a, 0x11, 0x45, 0x6e, 0x63,
    0x6c, 0x61, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23,
    0x0a, 0x1f, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
    0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41,
    0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
    0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4e,
    0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
    0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4e, 0x43,
    0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45,
    0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56,
    0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54,
    0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x47,
    0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
    0x42, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x47,
    0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x43, 0x4c, 0x41, 0x56, 0x45, 0x5f,
    0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x44,
    0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x42, 0x8f,
    0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e,
    0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x56, 0x43, 0x58, 0xaa, 0x02,
    0x12, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
    0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x5c, 0x43,
    0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x56, 0x61, 0x75, 0x6c, 0x74,
    0x72, 0x6f, 0x6e, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
    0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x56, 0x61, 0x75, 0x6c,
    0x74, 0x72, 0x6f, 0x6e, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
    0x4a, 0x8a, 0x0d, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x31, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c,
    0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x00, 0x1b, 0x0a,
    0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x04, 0x00, 0x0b, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x00, 0x01, 0x12, 0x03, 0x04, 0x08, 0x12, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x05, 0x02, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x05,
    0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x16, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x05, 0x2c, 0x2d, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x06, 0x02, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x06, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x05, 0x12, 0x03, 0x06, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x06, 0x16, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x06, 0x2c, 0x2d, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00, 0x12, 0x04, 0x07, 0x02, 0x0a,
    0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12, 0x03, 0x07, 0x08, 0x0d, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x08, 0x04, 0x2e, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x08, 0x04, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x08, 0x16, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02,
    0x03, 0x12, 0x03, 0x08, 0x2c, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03,
    0x09, 0x04, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x06, 0x12, 0x03, 0x09, 0x04,
    0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x09, 0x16, 0x29, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x09, 0x2c, 0x2d, 0x0a, 0x0a, 0x0a,
    0x02, 0x05, 0x00, 0x12, 0x04, 0x0d, 0x00, 0x26, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01,
    0x12, 0x03, 0x0d, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0e,
    0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0e, 0x02, 0x1b,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0e, 0x35, 0x36, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0f, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x01, 0x02, 0x12, 0x03, 0x0f, 0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02, 0x12,
    0x03, 0x10, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x10,
    0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x10, 0x35, 0x36,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x03, 0x12, 0x03, 0x11, 0x02, 0x37, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x11, 0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x11, 0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x04, 0x12, 0x03, 0x12, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x12, 0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x12,
    0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x05, 0x12, 0x03, 0x13, 0x02, 0x37, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x13, 0x02, 0x25, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x13, 0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x06, 0x12, 0x03, 0x14, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06,
    0x01, 0x12, 0x03, 0x14, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x14, 0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x07, 0x12, 0x03, 0x15, 0x02,
    0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x15, 0x02, 0x25, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x07, 0x02, 0x12, 0x03, 0x15, 0x35, 0x36, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x00, 0x02, 0x08, 0x12, 0x03, 0x16, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x08, 0x01, 0x12, 0x03, 0x16, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x08,
    0x02, 0x12, 0x03, 0x16, 0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x09, 0x12, 0x03,
    0x17, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x17, 0x02,
    0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x09, 0x02, 0x12, 0x03, 0x17, 0x35, 0x36, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0a, 0x12, 0x03, 0x18, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x18, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x0a, 0x02, 0x12, 0x03, 0x18, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0b,
    0x12, 0x03, 0x19, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0b, 0x01, 0x12, 0x03,
    0x19, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x19, 0x35,
    0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0c, 0x12, 0x03, 0x1a, 0x02, 0x38, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x1a, 0x02, 0x30, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x1a, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x0d, 0x12, 0x03, 0x1b, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0d, 0x01,
    0x12, 0x03, 0x1b, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0d, 0x02, 0x12, 0x03,
    0x1b, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0e, 0x12, 0x03, 0x1c, 0x02, 0x38,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x1c, 0x02, 0x25, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x0e, 0x02, 0x12, 0x03, 0x1c, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x00, 0x02, 0x0f, 0x12, 0x03, 0x1d, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x0f, 0x01, 0x12, 0x03, 0x1d, 0x02, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0f, 0x02,
    0x12, 0x03, 0x1d, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x10, 0x12, 0x03, 0x1e,
    0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x10, 0x01, 0x12, 0x03, 0x1e, 0x02, 0x1e,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x10, 0x02, 0x12, 0x03, 0x1e, 0x35, 0x37, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x11, 0x12, 0x03, 0x1f, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x11, 0x01, 0x12, 0x03, 0x1f, 0x02, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x11, 0x02, 0x12, 0x03, 0x1f, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x12, 0x12,
    0x03, 0x20, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x12, 0x01, 0x12, 0x03, 0x20,
    0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x12, 0x02, 0x12, 0x03, 0x20, 0x35, 0x37,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x13, 0x12, 0x03, 0x21, 0x02, 0x38, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x13, 0x01, 0x12, 0x03, 0x21, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x13, 0x02, 0x12, 0x03, 0x21, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x14, 0x12, 0x03, 0x22, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x14, 0x01, 0x12,
    0x03, 0x22, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x14, 0x02, 0x12, 0x03, 0x22,
    0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x15, 0x12, 0x03, 0x23, 0x02, 0x38, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x15, 0x01, 0x12, 0x03, 0x23, 0x02, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x15, 0x02, 0x12, 0x03, 0x23, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x16, 0x12, 0x03, 0x24, 0x02, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x16,
    0x01, 0x12, 0x03, 0x24, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x16, 0x02, 0x12,
    0x03, 0x24, 0x35, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x17, 0x12, 0x03, 0x25, 0x02,
    0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x17, 0x01, 0x12, 0x03, 0x25, 0x02, 0x22, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x17, 0x02, 0x12, 0x03, 0x25, 0x35, 0x37, 0x0a, 0x0a, 0x0a,
    0x02, 0x05, 0x01, 0x12, 0x04, 0x28, 0x00, 0x31, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x01, 0x01,
    0x12, 0x03, 0x28, 0x05, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x00, 0x12, 0x03, 0x29,
    0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x29, 0x02, 0x21,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x29, 0x2f, 0x30, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x01, 0x02, 0x01, 0x12, 0x03, 0x2a, 0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2a, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02,
    0x01, 0x02, 0x12, 0x03, 0x2a, 0x2f, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x02, 0x12,
    0x03, 0x2b, 0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2b,
    0x02, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x2b, 0x2f, 0x30,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x03, 0x12, 0x03, 0x2c, 0x02, 0x31, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x2c, 0x02, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x2c, 0x2f, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x04, 0x12, 0x03, 0x2d, 0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x2d, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x04, 0x02, 0x12, 0x03, 0x2d,
    0x2f, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x05, 0x12, 0x03, 0x2e, 0x02, 0x31, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x2e, 0x02, 0x2c, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x05, 0x02, 0x12, 0x03, 0x2e, 0x2f, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x01, 0x02, 0x06, 0x12, 0x03, 0x2f, 0x02, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06,
    0x01, 0x12, 0x03, 0x2f, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x2f, 0x2f, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x07, 0x12, 0x03, 0x30, 0x02,
    0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x07, 0x01, 0x12, 0x03, 0x30, 0x02, 0x26, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x07, 0x02, 0x12, 0x03, 0x30, 0x2f, 0x30, 0x62, 0x06, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x33,
];
include!("vaultron.common.v1.serde.rs");
// @@protoc_insertion_point(module)